<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using MessagePack;
using MessagePack.Formatters;

namespace MagicOnion
{
    // T2 ~ T20

<# for(var i = 2; i <= 20; i++) {
    var typeArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0}", x)));
    var methodArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0} item{0}", x)));
    var defaultArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("T{0} default{0}", x)));
    var itemArgs = string.Join(", ", Enumerable.Range(1, i).Select(x => string.Format("item{0}", x)));
 #>
    
    [MessagePackObject]
    public struct DynamicArgumentTuple<<#= typeArgs #>>
    {
<# for(var j = 1; j <= i; j++) { #>
        [Key(<#= j - 1  #>)]
        public readonly T<#= j#> Item<#= j #>;
<# } #>

        [SerializationConstructor]
        public DynamicArgumentTuple(<#= methodArgs #>)
        {
<# for(var j = 1; j <= i; j++) { #>
            Item<#= j#> = item<#= j #>;
<# } #>
        }
    }

    public class DynamicArgumentTupleFormatter<<#= typeArgs #>> : IMessagePackFormatter<DynamicArgumentTuple<<#= typeArgs #>>>
    {
<# for(var j = 1; j <= i; j++) { #>
        readonly T<#= j #> default<#= j #>;
<# } #>

        public DynamicArgumentTupleFormatter(<#= defaultArgs #>)
        {
<# for(var j = 1; j <= i; j++) { #>
            this.default<#= j #> = default<#= j #>;
<# } #>
        }

        public int Serialize(ref byte[] bytes, int offset, DynamicArgumentTuple<<#= typeArgs #>> value, IFormatterResolver formatterResolver)
        {
            var startOffset = offset;
<# if( i<= 15) { #>
            offset += MessagePackBinary.WriteFixedArrayHeaderUnsafe(ref bytes, offset, <#= i #>);
<# } else { #>
            offset += MessagePackBinary.WriteArrayHeader(ref bytes, offset, <#= i #>);
<# } #>
<# for(var j = 1; j <= i; j++) { #>
            offset += formatterResolver.GetFormatterWithVerify<T<#= j #>>().Serialize(ref bytes, offset, value.Item<#= j #>, formatterResolver);
<# } #>
            return offset - startOffset;
        }

        public DynamicArgumentTuple<<#= typeArgs #>> Deserialize(byte[] bytes, int offset, IFormatterResolver formatterResolver, out int readSize)
        {
            var startOffset = offset;
            
            var length = MessagePackBinary.ReadArrayHeader(bytes, offset, out readSize);
            offset += readSize;

<# for(var j = 1; j <= i; j++) { #>
            var item<#= j #> = default<#= j #>;
<# } #>

            for (var i = 0; i < length; i++)
            {
                switch (i)
                {
<# for(var j = 1; j <= i; j++) { #>
                    case <#= j - 1 #>:
                        item<#= j #> = formatterResolver.GetFormatterWithVerify<T<#= j #>>().Deserialize(bytes, offset, formatterResolver, out readSize);
                        break;
<# } #>
                    default:
                        readSize = MessagePackBinary.ReadNextBlock(bytes, offset);
                        break;
                }

                offset += readSize;
            }

            readSize =  offset - startOffset;
            return new DynamicArgumentTuple<<#= typeArgs #>>(<#= itemArgs #>);
        }
    }
<# } #>
}